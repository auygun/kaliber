// Based on https://learnopengl.com/PBR/Theory

#ifdef GL_ES
precision highp float;
#endif

IN(0) vec3 world_pos;
IN(1) vec3 normal;
IN(2) vec2 tex_coord;

UNIFORM_BEGIN
UNIFORM_V(mat4 model)
UNIFORM_V(mat4 view_projection)
UNIFORM_F(vec3 light_pos1)
UNIFORM_F(vec3 light_pos2)
UNIFORM_F(vec3 light_pos3)
UNIFORM_F(vec3 light_pos4)
UNIFORM_F(float light_power1)
UNIFORM_F(float light_power2)
UNIFORM_F(float light_power3)
UNIFORM_F(float light_power4)
UNIFORM_F(vec3 cam_pos)
UNIFORM_F(vec3 albedo)
UNIFORM_F(float metallic)
UNIFORM_F(float roughness)
UNIFORM_F(float ao)
UNIFORM_END

FRAG_COLOR_OUT(frag_color)

const float PI = 3.14159265359;

float DistributionGGX(vec3 N, vec3 H, float roughness) {
  float a = roughness * roughness;
  float a2 = a * a;
  float NdotH = max(dot(N, H), 0.0);
  float NdotH2 = NdotH * NdotH;

  float nom = a2;
  float denom = (NdotH2 * (a2 - 1.0) + 1.0);
  denom = PI * denom * denom;

  return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness) {
  float r = (roughness + 1.0);
  float k = (r * r) / 8.0;

  float nom = NdotV;
  float denom = NdotV * (1.0 - k) + k;

  return nom / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {
  float NdotV = max(dot(N, V), 0.0);
  float NdotL = max(dot(N, L), 0.0);
  float ggx2 = GeometrySchlickGGX(NdotV, roughness);
  float ggx1 = GeometrySchlickGGX(NdotL, roughness);

  return ggx1 * ggx2;
}

vec3 FresnelSchlick(float cosTheta, vec3 F0) {
  return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

void main() {
  vec3 light_pos[4];
  light_pos[0] = PARAM(light_pos1);
  light_pos[1] = PARAM(light_pos2);
  light_pos[2] = PARAM(light_pos3);
  light_pos[3] = PARAM(light_pos4);
  float light_power[4];
  light_power[0] = PARAM(light_power1);
  light_power[1] = PARAM(light_power2);
  light_power[2] = PARAM(light_power3);
  light_power[3] = PARAM(light_power4);

  vec3 N = normalize(normal);
  vec3 V = normalize(PARAM(cam_pos) - world_pos);

  // calculate reflectance at normal incidence; if dia-electric (like plastic)
  // use F0 of 0.04 and if it's a metal, use the albedo color as F0 (metallic
  // workflow)
  vec3 F0 = vec3(0.04);
  F0 = mix(F0, PARAM(albedo), PARAM(metallic));

  // reflectance equation
  vec3 Lo = vec3(0.0);
  for (int i = 0; i < 4; ++i) {
    // calculate per-light radiance
    vec3 L = normalize(light_pos[i] - world_pos);
    vec3 H = normalize(V + L);
    float distance = length(light_pos[i] - world_pos);
    float attenuation = 1.0 / (distance * distance);
    vec3 radiance = vec3(light_power[i]) * attenuation;

    // Cook-Torrance BRDF
    float NDF = DistributionGGX(N, H, PARAM(roughness));
    float G = GeometrySmith(N, V, L, PARAM(roughness));
    vec3 F = FresnelSchlick(max(dot(H, V), 0.0), F0);

    vec3 numerator = NDF * G * F;
    float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) +
                        0.0001;  // + 0.0001 to prevent divide by zero
    vec3 brdf = numerator / denominator;

    // kS is equal to Fresnel
    vec3 kS = F;
    // for energy conservation, the diffuse and specular light can't
    // be above 1.0 (unless the surface emits light); to preserve this
    // relationship the diffuse component (kD) should equal 1.0 - kS.
    vec3 kD = vec3(1.0) - kS;
    // multiply kD by the inverse metalness such that only non-metals
    // have diffuse lighting, or a linear blend if partly metal (pure metals
    // have no diffuse light).
    kD *= 1.0 - PARAM(metallic);

    // scale light by NdotL
    float NdotL = max(dot(N, L), 0.0);

    // add to outgoing radiance Lo
    Lo += (kD * PARAM(albedo) / PI + brdf) * radiance *
          NdotL;  // note that we already multiplied the BRDF by the Fresnel
                  // (kS) so we won't multiply by kS again
  }

  // ambient lighting
  vec3 ambient = vec3(0.03) * PARAM(albedo) * PARAM(ao);
  vec3 color = ambient + Lo;

  // HDR tonemapping
  color = color / (color + vec3(1.0));
  // gamma correct
  color = pow(color, vec3(1.0 / 2.2));

  FRAG_COLOR(frag_color) = vec4(color, 1.0);
}
