config("vulkan_public") {
  include_dirs = [ "include" ]

  if (target_os == "linux") {
    defines = [ "VK_USE_PLATFORM_XLIB_KHR" ]
  } else if (target_os == "win") {
    defines = [ "VK_USE_PLATFORM_WIN32_KHR" ]
  } else if (target_os == "android") {
    defines = [ "VK_USE_PLATFORM_ANDROID_KHR" ]
  }
}

source_set("vulkan") {
  configs -= [ "//build:warnings" ]
  public_configs = [ ":vulkan_public" ]

  sources = [
    "include/vulkan/vk_icd.h",
    "include/vulkan/vk_layer.h",
    "include/vulkan/vk_platform.h",
    "include/vulkan/vulkan.h",
    "include/vulkan/vulkan.hpp",
    "include/vulkan/vulkan_android.h",
    "include/vulkan/vulkan_beta.h",
    "include/vulkan/vulkan_core.h",
    "include/vulkan/vulkan_directfb.h",
    "include/vulkan/vulkan_enums.hpp",
    "include/vulkan/vulkan_extension_inspection.hpp",
    "include/vulkan/vulkan_format_traits.hpp",
    "include/vulkan/vulkan_fuchsia.h",
    "include/vulkan/vulkan_funcs.hpp",
    "include/vulkan/vulkan_ggp.h",
    "include/vulkan/vulkan_handles.hpp",
    "include/vulkan/vulkan_hash.hpp",
    "include/vulkan/vulkan_hpp_macros.hpp",
    "include/vulkan/vulkan_ios.h",
    "include/vulkan/vulkan_macos.h",
    "include/vulkan/vulkan_metal.h",
    "include/vulkan/vulkan_raii.hpp",
    "include/vulkan/vulkan_screen.h",
    "include/vulkan/vulkan_shared.hpp",
    "include/vulkan/vulkan_static_assertions.hpp",
    "include/vulkan/vulkan_structs.hpp",
    "include/vulkan/vulkan_to_string.hpp",
    "include/vulkan/vulkan_vi.h",
    "include/vulkan/vulkan_video.hpp",
    "include/vulkan/vulkan_wayland.h",
    "include/vulkan/vulkan_win32.h",
    "include/vulkan/vulkan_xcb.h",
    "include/vulkan/vulkan_xlib.h",
    "include/vulkan/vulkan_xlib_xrandr.h",
    "vk_enum_string_helper.h",
  ]

  deps = []
}
